# import pickle
# import instanceGeneration
# from instanceGeneration import Instances

# insName = '10-nodeInstances'
# f = open(insName, 'rb')

# a = []
# print("start")
# for i in range(10):
#     ins = pickle.load(f)
#     a.append(ins)
#     print("end")
# print(a[0].aiFixedCost)
# print(a[1].aiFixedCost)

import multiprocessing
import timeit
import operator
import numpy as np


def do_something(x):
    v = pow(x, 2)
    return v


def Foo_np(seed=None):
    local_state = np.random.RandomState()
    print(local_state.rand())


def test():
    pool = multiprocessing.Pool()
    pool.map(Foo_np, range(5))
    pool.close()
    pool.join()


from scipy.stats import ttest_ind

import matplotlib.pyplot as plt

if __name__ == '__main__':
    fileName = "0600-node"
    iGenNum = 250
    listfAveBestIndFitnessEveryGen = [0.0037043335989392647, 0.003813816402192639, 0.00405723201401386, 0.004233942147758159, 0.004410764866681049, 0.00457338384573199, 0.004708422515593133, 0.004815695544716163, 0.004911891237822544, 0.005030813950778817, 0.005104113041406769, 0.005166206684114318, 0.005240034410313109, 0.005285881017068344, 0.005340025126227659, 0.005381528206625767, 0.005449066509594837, 0.005534826936307266, 0.00558717488133993, 0.005642968696126561, 0.005688207369302862, 0.005733873695016883, 0.005779862180251881, 0.005833618335324237, 0.005880385180198107, 0.0059276063753248825, 0.005981624684746478, 0.006030273299628263, 0.006079249987111111, 0.0061286885213879495, 0.0061786571752592365, 0.006232730023166294, 0.006284495158209763, 0.006342503121330606, 0.00639541476916296, 0.006448752297220459, 0.0065025645564828856, 0.006556938841622353, 0.006611934708205663, 0.006667670389501136, 0.006724168072590195, 0.006781355639387846, 0.006839059821261285, 0.006897470803910106, 0.00695652480728001, 0.007016331466562104, 0.007076953863656622, 0.007138346990232472, 0.0072004832189670395, 0.007263383884034945, 0.007326983153834917, 0.007391293344492114, 0.007456560171322837, 0.0075227449180697336, 0.007589768178498886, 0.007657261389661933, 0.007725401469914278, 0.007794503795147875, 0.007864511846882522, 0.007935282540348849, 0.00800681107659645, 0.008079089155097653, 0.008152248858111005, 0.008226518789501114, 0.008301734159422805, 0.008377865439792354, 0.00845483574302382, 0.008532642068688468, 0.008611567114168038, 0.008691436306883866, 0.008772128326881366, 0.008853973821926075, 0.008936942746205613, 0.009020937070538429, 0.009106102307944997, 0.009192226391434096, 0.009279517895876195, 0.009367774375261328, 0.009457184005656993, 0.009547683886794759, 0.009639333614877626, 0.009732097196336352, 0.009826102386305966, 0.00992146767061292, 0.010017903591160993, 0.010115957954142015, 0.010215201384542499, 0.01031580608219394, 0.010417783200288022, 0.01052092533724453, 0.010625684411956122, 0.010731893130510156, 0.010839882960489485, 0.010949378094423697, 0.011060350491616687, 0.011173138319680581, 0.0112872540874858, 0.011403173329276928, 0.011520682423172184, 0.011640001903896672, 0.011761073035997691, 0.011884005714134189, 0.012008292095381935, 0.012133563629406662, 0.012261088158381356, 0.012390482920139187, 0.012521591791782286, 0.012654923592216585, 0.012790466581012632, 0.01292763732353302, 0.013066951681414838, 0.013208463560232836, 0.013351901501038755, 0.01349628379265377, 0.01364277342642638, 0.013790996143919921, 0.013939837119566322, 0.014090884252927177, 0.01424394987420734, 0.01439903483733374, 0.014555739925196123, 0.014714745384493707, 0.014876069517755549, 0.01503969935351469, 0.015205663246114965, 0.015374204666608484, 0.01554533101945163, 0.015719010779670743, 0.01589556529007331, 0.01607396543504928, 0.016255613002309214, 0.016440050947112005, 0.016626693640266445, 0.016814825893546874, 0.01700526417252376, 0.017198666843877213, 0.01739498489722881, 0.01759344444406306, 0.0177941173189022, 0.01799672940288163, 0.018201166554411053, 0.018407401141464032, 0.018617138848539577, 0.01882903594015655, 0.01904363275409805, 0.019259357421610633, 0.01947818013572081, 0.019698914654309913, 0.019921514619372277, 0.020145892184860393, 0.020371505678771204, 0.02059728368572947, 0.020825688990809065, 0.021057536515254664, 0.021288532228548956, 0.021520097581833073, 0.021752175731925668, 0.021984902291305085, 0.022217100639592008, 0.022449463232950734, 0.022680714578467036, 0.022910645583353862, 0.02313925778506055, 0.023363118719755264, 0.02358467046725181, 0.023800203068373344, 0.02401346678693391, 0.0242213811868072, 0.024425567483213628, 0.024621229447886216, 0.024803869258949063, 0.024976443762650413, 0.025132029074147594, 0.02528942679351895, 0.025425751604438263, 0.02554628558981629, 0.02565450917595158, 0.02576496829514983, 0.025873924346274106, 0.025963001606553248, 0.0260507298270121, 0.026123274502818, 0.026186878496013838, 0.026239408905179, 0.02629565339958779, 0.026337146774364856, 0.026374837350616465, 0.026397275877288285, 0.02641821750687649, 0.026444858920159638, 0.02647056678204802, 0.026488538237769876, 0.02651296487960218, 0.026514098665010987, 0.026514781757654697, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614, 0.026520087585622614]
    listiAveDiversityMetric1EveGen = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9775, 0.9775, 0.8815000000000002, 0.9550000000000001, 0.9445, 0.8365, 0.8590000000000002, 0.6560000000000001, 0.5295, 0.386, 0.41900000000000004, 0.6545000000000001, 0.5495000000000001, 0.48650000000000004, 0.33399999999999996, 0.2015, 0.118, 0.19000000000000006, 0.16750000000000007, 0.1365, 0.19550000000000006, 0.16750000000000004, 0.1365, 0.1085, 0.09999999999999999, 0.17700000000000007, 0.16750000000000004, 0.215, 0.177, 0.13699999999999998, 0.1095, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09999999999999999, 0.09949999999999999, 0.09899999999999999, 0.09849999999999999, 0.09699999999999999, 0.09749999999999999, 0.09399999999999999, 0.092, 0.091, 0.091, 0.08349999999999999, 0.07949999999999999, 0.0695, 0.065, 0.061, 0.059, 0.057999999999999996, 0.05500000000000001, 0.05450000000000001, 0.05, 0.04050000000000001, 0.0335, 0.029000000000000005, 0.026500000000000003, 0.023, 0.02, 0.017499999999999998, 0.0165, 0.015000000000000003, 0.013500000000000002, 0.013500000000000002, 0.013500000000000002, 0.013000000000000001, 0.013000000000000001, 0.013000000000000001, 0.0125, 0.0125, 0.0115, 0.011, 0.011, 0.011, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999, 0.010499999999999999]
    listiAveFitEvaNumByThisGen = [200, 6556, 12917, 19277, 25632, 31991, 38350, 44713, 51072, 57436, 63794, 70155, 76520, 82880, 89240, 95600, 101961, 108318, 114674, 121034, 127392, 133754, 140113, 146473, 152834, 159199, 165559, 171921, 178279, 184636, 190996, 197361, 203721, 210081, 216442, 222804, 229165, 235526, 241887, 248245, 254605, 260971, 267327, 273685, 280044, 286404, 292764, 299122, 305486, 311845, 318202, 324558, 330917, 337273, 343632, 349993, 356352, 362713, 369072, 375429, 381780, 388139, 394496, 400860, 407223, 413579, 419940, 426300, 432654, 439015, 445371, 451729, 458090, 464450, 470806, 477158, 483521, 489877, 496239, 502603, 508959, 515322, 521687, 528047, 534409, 540768, 547131, 553491, 559849, 566208, 572566, 578924, 585283, 591641, 597998, 604356, 610711, 617074, 623432, 629792, 636151, 642511, 648865, 655228, 661583, 667941, 674304, 680666, 687027, 693391, 699753, 706114, 712476, 718839, 725195, 731558, 737916, 744272, 750633, 756989, 763349, 769708, 776067, 782430, 788791, 795147, 801506, 807866, 814230, 820585, 826945, 833308, 839663, 846024, 852387, 858748, 865103, 871460, 877825, 884185, 890545, 896907, 903270, 909631, 915991, 922349, 928712, 935072, 941433, 947787, 954149, 960503, 966862, 973223, 979590, 985953, 992310, 998673, 1005030, 1011394, 1017756, 1024119, 1030480, 1036836, 1043192, 1049549, 1055911, 1062270, 1068630, 1074986, 1081342, 1087704, 1094065, 1100429, 1106790, 1113153, 1119509, 1125870, 1132232, 1138590, 1144952, 1151314, 1157673, 1164034, 1170393, 1176757, 1183122, 1189481, 1195842, 1202205, 1208565, 1214925, 1221288, 1227647, 1234009, 1240369, 1246732, 1253100, 1259462, 1265824, 1272188, 1278550, 1284912, 1291276, 1297634, 1303996, 1310355, 1316713, 1323072, 1329430, 1335791, 1342146, 1348502, 1354863, 1361225, 1367583, 1373946, 1380302, 1386660, 1393018, 1399381, 1405741, 1412100, 1418460, 1424821, 1431183, 1437541, 1443902, 1450260, 1456621, 1462980, 1469340, 1475695, 1482057, 1488418, 1494779, 1501142, 1507500, 1513858, 1520213, 1526575, 1532934, 1539295, 1545658, 1552020, 1558379, 1564739, 1571100, 1577465, 1583828, 1590189]
    fig = plt.figure()
    listGenIndex = [g for g in range(iGenNum + 1)]
    ax1 = fig.add_subplot(111)
    l1, = ax1.plot(listGenIndex, listfAveBestIndFitnessEveryGen)
    # 右方Y轴
    ax2 = ax1.twinx()
    l2, = ax2.plot(listGenIndex, listiAveDiversityMetric1EveGen, 'r')
    # l3, = ax2.plot(listGenIndex, listiAveDiversityMetric2EveGen, 'purple', linestyle='--')
    for label in ax2.yaxis.get_ticklabels():
        label.set_fontsize(8)
    # 上方X轴
    ax3 = ax1.twiny()  # 与ax1共用1个y轴，在上方生成自己的x轴
    ax3.set_xlabel("# of Fitness Evaluation")
    listfFeIndex = list(np.linspace(0, iGenNum, num=10+1))
    # print("listFeIndex:", listfFeIndex)
    listFeXCoordinate = []
    for f in range(len(listfFeIndex)):
        listFeXCoordinate.append(listiAveFitEvaNumByThisGen[int(listfFeIndex[f])])
    # print("listFeXCoordinate:", listFeXCoordinate)
    ax3.plot(listGenIndex, listfAveBestIndFitnessEveryGen)
    ax3.set_xticks(listfFeIndex)
    ax3.set_xticklabels(listFeXCoordinate, rotation=10)
    for label in ax3.xaxis.get_ticklabels():
        label.set_fontsize(6)
    plt.legend(handles=[l1, l2], labels=['l1', 'l2'], loc='best')

    ax1.set_xlabel("# of Generation")
    ax1.set_ylabel("Fitness Of Best Individual (× 1e-3)")
    ax2.set_ylabel("Diversity Metric")
    plt.savefig(fileName + '_GASLSDM_Curve(m=2)-ins'+str(7)+'.svg')


    # data1 = [11784.86154, 11780.24259, 11732.45826, 11997.97669, 11860.6101, 12383.62024, 11906.57894, 12205.63157, 11784.86154, 11902.06717]
    # data2 = [11780.24259, 11732.45826, 11732.45826, 11732.45826, 11732.45826, 11732.45826, 11732.45826, 11732.45826, 11732.45826, 11780.24259]
    # stat,p = ttest_ind(data1,data2)
    # print("stat为：%f" %stat,"p值为：%f" %p)


    # test()
    # a =[]
    # start = timeit.default_timer()
    # for i in range(1, 10):
    #     a.append(do_something(i))

    # end = timeit.default_timer()
    # print('single processing time:', str(end-start), 's')
    # print(a[1:10])

    # # revise to parallel
    # items = [x for x in range(1, 10)]
    # p = multiprocessing.Pool()
    # start = timeit.default_timer()
    # b = p.map(do_something, items)
    # p.close()
    # p.join()
    # end = timeit.default_timer()
    # print('multi processing time:', str(end-start), 's')
    # print(b)
    # print('Return values are all equal ?:', operator.eq(a, b))
