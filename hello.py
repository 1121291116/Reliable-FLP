# import pickle
# import instanceGeneration
# from instanceGeneration import Instances

# insName = '10-nodeInstances'
# f = open(insName, 'rb')

# a = []
# print("start")
# for i in range(10):
#     ins = pickle.load(f)
#     a.append(ins)
#     print("end")
# print(a[0].aiFixedCost)
# print(a[1].aiFixedCost)

import multiprocessing
import timeit
import operator
import numpy as np


def do_something(x):
    v = pow(x, 2)
    return v


def Foo_np(seed=None):
    local_state = np.random.RandomState()
    print(local_state.rand())


def test():
    pool = multiprocessing.Pool()
    pool.map(Foo_np, range(5))
    pool.close()
    pool.join()


from scipy.stats import ttest_ind

import matplotlib.pyplot as plt

if __name__ == '__main__':
    fileName = "100-node"
    iGenNum = 400
    listfAveBestIndFitnessEveryGen = [0.026302177926196612, 0.027046729461364178, 0.028396809474870093, 0.029792645366362884, 0.03137301042334683, 0.03388352847733845, 0.03474371710759468, 0.036207754536765, 0.03749084068127177, 0.03843057842436424, 0.039150745660879394, 0.040207172811875434, 0.041392649990696306, 0.042693758604390855, 0.043348343378789525, 0.04436478282342769, 0.04483440645078323, 0.04556838838126078, 0.04637135755727284, 0.0467078348259005, 0.04708239196103713, 0.04798646042265713, 0.04842005184871147, 0.048941088061131136, 0.04919866912205785, 0.04993857913008232, 0.05016041968025089, 0.050988766248911674, 0.05156812214529512, 0.0519144492703721, 0.05206835724303412, 0.052695010627567054, 0.05312060394895433, 0.05317736253233481, 0.0538935459005053, 0.05467026416833705, 0.05483491581246591, 0.055635225270545076, 0.05612802860777547, 0.05614007529982877, 0.05618356323788047, 0.05644736775286282, 0.05644736775286282, 0.056496367764935496, 0.05672079579252433, 0.056920486780902224, 0.05741320813524105, 0.05741320813524105, 0.057534516697208146, 0.05762052354439652, 0.05770370968694257, 0.058849206223277425, 0.05892915302280592, 0.05899991322556095, 0.059033254086822196, 0.05917638668919328, 0.05934730795711553, 0.05937718224909144, 0.05945724455235322, 0.05964131223055217, 0.0599640791848454, 0.060263564930331213, 0.06036561349667021, 0.060465978365476424, 0.06055419477296396, 0.06055965782370369, 0.06094994444960668, 0.06094994444960668, 0.06104907818804709, 0.061089646892597514, 0.06116945020992311, 0.06144795761987411, 0.06145107292707034, 0.06152288419707991, 0.06177430514620345, 0.06215228421890023, 0.06219543604046115, 0.06219543604046115, 0.06236822476617111, 0.06278010293853081, 0.06316653340083102, 0.06326453341328167, 0.06326453341328167, 0.06326453341328167, 0.06328463935151636, 0.06335580084371027, 0.06383610483531564, 0.06393559957022146, 0.06393559957022146, 0.06393559957022146, 0.06393559957022146, 0.06413137974823725, 0.06417878570996832, 0.06431963898311004, 0.06431963898311004, 0.06431963898311004, 0.06431963898311004, 0.0643840741581421, 0.06492988882682213, 0.06492988882682213, 0.06508624593112418, 0.06508624593112418, 0.06542909695298836, 0.06542909695298836, 0.06542909695298836, 0.06550539181955224, 0.06554283660096202, 0.06571657706573028, 0.06575368033902258, 0.06575368033902258, 0.06578323481930752, 0.06608190774812345, 0.06612214710637315, 0.06612214710637315, 0.06612214710637315, 0.066194218486785, 0.066194218486785, 0.06641949040812656, 0.06643695022819913, 0.06663328364852515, 0.06674800042724605, 0.06674800042724605, 0.06705829879834688, 0.0671095025708174, 0.0671095025708174, 0.0671095025708174, 0.0671431756215788, 0.0671431756215788, 0.0671431756215788, 0.06728219145415174, 0.06745503123494243, 0.06745503123494243, 0.0679563895099303, 0.06818079065079816, 0.06820974351592965, 0.06820974351592965, 0.06820974351592965, 0.06820974351592965, 0.06820974351592965, 0.06820974351592965, 0.06835746722492878, 0.06843909786009628, 0.0687380378392892, 0.06885646010695384, 0.06885646010695384, 0.06885646010695384, 0.06885646010695384, 0.06885717145629922, 0.06892152972649698, 0.06892152972649698, 0.06892152972649698, 0.06892152972649698, 0.06901605687164512, 0.06919703363612906, 0.06919703363612906, 0.06919703363612906, 0.06919703363612906, 0.06941064121092101, 0.06951546057580556, 0.06951546057580556, 0.06951546057580556, 0.06951546057580556, 0.06951546057580556, 0.06965596361976036, 0.06965596361976036, 0.06965596361976036, 0.06965596361976036, 0.06965596361976036, 0.06965596361976036, 0.06966678649170638, 0.06997960229286129, 0.06997960229286129, 0.07021284691430998, 0.07021284691430998, 0.07021284691430998, 0.07021284691430998, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703016935389795, 0.0703158772124161, 0.07051554072120671, 0.0707809814069448, 0.0707809814069448, 0.0707809814069448, 0.0707809814069448, 0.07090461126381853, 0.07094808463915721, 0.07096317889327326, 0.07096317889327326, 0.07109433514117601, 0.07112247467268472, 0.07112247467268472, 0.07112247467268472, 0.07112247467268472, 0.07112247467268472, 0.07127159165378319, 0.07137862551322581, 0.07141651800883933, 0.07141651800883933, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.07146634903133678, 0.0714780438944975, 0.0714780438944975, 0.0714780438944975, 0.07153697307769143, 0.07160303010780092, 0.07160303010780092, 0.07160303010780092, 0.07160303010780092, 0.07161860276503298, 0.07161860276503298, 0.07161860276503298, 0.07161860276503298, 0.07161860276503298, 0.07161860276503298, 0.07162304398624189, 0.07162304398624189, 0.07170468274571454, 0.07170468274571454, 0.07170468274571454, 0.07170468274571454, 0.07170468274571454, 0.07170468274571454, 0.07170468274571454, 0.07171438678647502, 0.07171438678647502, 0.07171438678647502, 0.07171438678647502, 0.07171438678647502, 0.07175573701351609, 0.07175573701351609, 0.07175573701351609, 0.07175573701351609, 0.0717914326720007, 0.07189184412918602, 0.07189184412918602, 0.07189184412918602, 0.07195110442154641, 0.07195110442154641, 0.07202245993202469, 0.07202245993202469, 0.07202245993202469, 0.07202245993202469, 0.07202245993202469, 0.07202245993202469, 0.07202245993202469, 0.07204954007830576, 0.07204954007830576, 0.07204954007830576, 0.07207987748878693, 0.07207987748878693, 0.07207987748878693, 0.07207987748878693, 0.07207987748878693, 0.07219749597442938, 0.07219749597442938, 0.07219749597442938, 0.07219749597442938, 0.07219749597442938, 0.07219749597442938, 0.07219749597442938, 0.07224900670475885, 0.07224900670475885, 0.07224900670475885, 0.07224900670475885, 0.07224900670475885, 0.07224900670475885, 0.07231953677496389, 0.07237961631279546, 0.07237961631279546, 0.07250528057960655, 0.07250528057960655, 0.07250528057960655, 0.07250528057960655, 0.07253700015181502, 0.07253700015181502, 0.07265586746226936, 0.07270302367243872, 0.0727086047158518, 0.0727086047158518, 0.0728384907561457, 0.0728384907561457, 0.0728660930430248, 0.0728660930430248, 0.07298162904398614, 0.07305559208628415, 0.07305767986669455, 0.07305767986669455, 0.07305767986669455, 0.07305767986669455, 0.07305767986669455, 0.07305767986669455, 0.07312588574931243, 0.07312588574931243, 0.07312588574931243, 0.07312588574931243, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07319347224827646, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07322082450179343, 0.07352104194066632, 0.07352104194066632, 0.07352104194066632, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07356074679262029, 0.07361309821906087, 0.07367272431872036, 0.07367272431872036, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07371910223984773, 0.07375175994793927, 0.07383242969090895, 0.07384313929465494, 0.07384313929465494, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07390675613964573, 0.07406215474927516, 0.07406215474927516, 0.07406215474927516, 0.07417937279423882, 0.07417937279423882, 0.07417937279423882, 0.0741879063774459, 0.07419932026027837, 0.07419932026027837, 0.07419932026027837, 0.07431564011264938, 0.07431564011264938, 0.07431564011264938, 0.07431564011264938, 0.07431564011264938, 0.07431564011264938, 0.07431564011264938, 0.0744132798245341, 0.0746654490952578, 0.0746654490952578, 0.0746654490952578, 0.0746654490952578, 0.0746654490952578]
    listiAveDiversityMetric1EveGen
    listiAveFitEvaNumByThisGen = [200, 559, 916, 1273, 1633, 1992, 2352, 2714, 3072, 3433, 3788, 4147, 4508, 4866, 5224, 5586, 5945, 6303, 6663, 7024, 7385, 7744, 8107, 8466, 8825, 9179, 9538, 9898, 10259, 10618, 10978, 11339, 11693, 12054, 12414, 12772, 13126, 13484, 13843, 14206, 14568, 14926, 15288, 15649, 16008, 16367, 16729, 17090, 17451, 17810, 18172, 18532, 18894, 19255, 19614, 19977, 20337, 20696, 21055, 21416, 21776, 22135, 22495, 22855, 23212, 23570, 23933, 24293, 24652, 25010, 25372, 25734, 26095, 26454, 26813, 27177, 27537, 27899, 28259, 28620, 28979, 29339, 29699, 30059, 30418, 30780, 31139, 31501, 31863, 32224, 32587, 32946, 33309, 33669, 34027, 34385, 34745, 35107, 35465, 35824, 36184, 36544, 36904, 37265, 37625, 37984, 38348, 38713, 39071, 39434, 39790, 40149, 40509, 40872, 41234, 41596, 41956, 42318, 42677, 43035, 43398, 43761, 44122, 44481, 44840, 45201, 45561, 45923, 46283, 46641, 47001, 47361, 47721, 48080, 48439, 48800, 49162, 49522, 49880, 50239, 50598, 50957, 51317, 51676, 52038, 52398, 52758, 53120, 53479, 53839, 54198, 54555, 54918, 55277, 55635, 55995, 56355, 56712, 57073, 57432, 57792, 58151, 58509, 58870, 59232, 59590, 59952, 60310, 60672, 61027, 61386, 61744, 62102, 62463, 62826, 63183, 63541, 63900, 64256, 64615, 64976, 65339, 65700, 66059, 66415, 66778, 67137, 67497, 67858, 68219, 68578, 68936, 69299, 69660, 70017, 70377, 70737, 71096, 71456, 71815, 72174, 72536, 72893, 73254, 73613, 73972, 74334, 74695, 75055, 75419, 75780, 76142, 76498, 76859, 77219, 77581, 77940, 78300, 78661, 79018, 79377, 79737, 80094, 80454, 80813, 81172, 81533, 81893, 82253, 82612, 82971, 83332, 83692, 84051, 84412, 84771, 85129, 85492, 85853, 86210, 86569, 86931, 87293, 87650, 88009, 88370, 88731, 89089, 89453, 89813, 90171, 90529, 90889, 91250, 91611, 91973, 92330, 92695, 93056, 93416, 93776, 94136, 94495, 94854, 95211, 95568, 95923, 96283, 96642, 96997, 97358, 97719, 98080, 98438, 98799, 99157, 99515, 99878, 100238, 100595, 100956, 101315, 101676, 102033, 102394, 102754, 103115, 103477, 103836, 104197, 104559, 104921, 105280, 105640, 106001, 106361, 106722, 107081, 107440, 107800, 108159, 108517, 108877, 109237, 109596, 109954, 110314, 110670, 111030, 111387, 111745, 112104, 112466, 112826, 113188, 113549, 113910, 114271, 114630, 114990, 115349, 115711, 116069, 116426, 116787, 117146, 117509, 117870, 118232, 118591, 118953, 119313, 119674, 120034, 120395, 120757, 121119, 121480, 121838, 122198, 122558, 122916, 123273, 123633, 123994, 124354, 124714, 125073, 125433, 125793, 126153, 126515, 126874, 127233, 127596, 127956, 128319, 128679, 129036, 129398, 129758, 130118, 130475, 130835, 131196, 131558, 131917, 132280, 132639, 133002, 133363, 133720, 134081, 134439, 134797, 135157, 135515, 135876, 136232, 136595, 136955, 137316, 137675, 138035, 138393, 138754, 139117, 139480, 139841, 140202, 140560, 140919, 141279, 141637, 141999, 142359, 142717, 143075, 143435, 143797, 144156]
    fig = plt.figure()
    listGenIndex = [g for g in range(iGenNum + 1)]
    ax1 = fig.add_subplot(111)
    l1, = ax1.plot(listGenIndex, listfAveBestIndFitnessEveryGen)
    # 右方Y轴
    ax2 = ax1.twinx()
    l2, = ax2.plot(listGenIndex, listiAveDiversityMetric1EveGen, 'r')
    #l3, = ax2.plot(listGenIndex, listiAveDiversityMetric2EveGen, 'purple', linestyle='--')
    # 上方X轴
    ax3 = ax1.twiny()  # 与ax1共用1个y轴，在上方生成自己的x轴
    ax3.set_xlabel("# of Fitness Evaluation")
    listfFeIndex = list(np.linspace(0, iGenNum, num=10+1))
    # print("listFeIndex:", listfFeIndex)
    listFeXCoordinate = []
    for f in range(len(listfFeIndex)):
        listFeXCoordinate.append(listiAveFitEvaNumByThisGen[int(listfFeIndex[f])])
    # print("listFeXCoordinate:", listFeXCoordinate)
    ax3.plot(listGenIndex, listfAveBestIndFitnessEveryGen)
    ax3.set_xticks(listfFeIndex)
    ax3.set_xticklabels(listFeXCoordinate, rotation=10)
    for label in ax3.xaxis.get_ticklabels():
        label.set_fontsize(6)
    plt.legend(handles=[l1, l2], labels=['Fitness curve', '0-HDR'], loc='best')
    
    ax1.set_xlabel("# of Generation")
    ax1.set_ylabel("Fitness Of Best Individual (× 1e-3)")
    ax2.set_ylabel("Diversity Metric")
    plt.savefig(fileName + '_GADM_Curve(m=2)-ins'+str(3)+'.svg')


    # data1 = [12565.04126,11829.34278,12022.25786,12172.77886,12656.80963,12315.59402,12301.09292,12380.59145,12892.73799,13208.61009]
    # data2 = [11784.86154,11780.24259,11732.45826,11997.97669,11860.6101,12383.62024,11906.57894,12205.63157,11784.86154,11902.06717]
    # stat,p = ttest_ind(data1,data2)
    # print("stat为：%f" %stat,"p值为：%f" %p)
    # test()
    # a =[]
    # start = timeit.default_timer()
    # for i in range(1, 10):
    #     a.append(do_something(i))

    # end = timeit.default_timer()
    # print('single processing time:', str(end-start), 's')
    # print(a[1:10])

    # # revise to parallel
    # items = [x for x in range(1, 10)]
    # p = multiprocessing.Pool()
    # start = timeit.default_timer()
    # b = p.map(do_something, items)
    # p.close()
    # p.join()
    # end = timeit.default_timer()
    # print('multi processing time:', str(end-start), 's')
    # print(b)
    # print('Return values are all equal ?:', operator.eq(a, b))
